
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 18 21:25:02 PDT 2014
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 18 21:25:02 PDT 2014
  */
public class CoolCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CoolCup() {super();}

  /** Constructor which sets the default scanner. */
  public CoolCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CoolCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\007\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\010\000\002\004\012" +
    "\000\002\005\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\004\004\007\001\002\000\006\002\001\004" +
    "\007\001\002\000\004\002\023\001\002\000\006\002\uffff" +
    "\004\uffff\001\002\000\004\055\010\001\002\000\006\011" +
    "\012\050\011\001\002\000\004\051\ufffb\001\002\000\004" +
    "\055\013\001\002\000\004\050\014\001\002\000\004\051" +
    "\ufffb\001\002\000\004\051\016\001\002\000\004\043\017" +
    "\001\002\000\006\002\ufffc\004\ufffc\001\002\000\004\051" +
    "\021\001\002\000\004\043\022\001\002\000\006\002\ufffd" +
    "\004\ufffd\001\002\000\004\002\000\001\002\000\006\002" +
    "\ufffe\004\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\010\002\004\003\003\004\005\001\001\000" +
    "\004\004\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CoolCup$actions {

 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

  private final CoolCup parser;

  /** Constructor */
  CUP$CoolCup$actions(CoolCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CoolCup$do_action(
    int                        CUP$CoolCup$act_num,
    java_cup.runtime.lr_parser CUP$CoolCup$parser,
    java.util.Stack            CUP$CoolCup$stack,
    int                        CUP$CoolCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolCup$result;

      /* select the action based on the action number */
      switch (CUP$CoolCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dummy_feature_list ::= 
            {
              Features RESULT =null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("dummy_feature_list",3, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE dummy_feature_list RBRACE SEMI 
            {
              class_ RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		 RESULT = new class_(curr_lineno(), n, p, f, curr_filename()); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("class",2, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class ::= CLASS TYPEID LBRACE dummy_feature_list RBRACE SEMI 
            {
              class_ RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		 RESULT = new class_(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("class",2, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_list class 
            {
              Classes RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		class_ c = (class_)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class 
            {
              Classes RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		class_ c = (class_)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		program start_val = (program)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		RESULT = start_val;
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CoolCup$parser.done_parsing();
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              program RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new program(curr_lineno(), cl); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

