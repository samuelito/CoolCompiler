
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 10 13:35:34 AST 2014
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 10 13:35:34 AST 2014
  */
public class CoolCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CoolCup() {super();}

  /** Constructor which sets the default scanner. */
  public CoolCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CoolCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\004\010\000\002\004\012\000\002\005\002\000" +
    "\002\005\004\000\002\005\004\000\002\006\014\000\002" +
    "\006\010\000\002\006\006\000\002\006\014\000\002\013" +
    "\005\000\002\014\002\000\002\014\003\000\002\014\005" +
    "\000\002\016\010\000\002\015\003\000\002\015\004\000" +
    "\002\017\007\000\002\017\011\000\002\017\007\000\002" +
    "\017\011\000\002\011\003\000\002\012\002\000\002\012" +
    "\003\000\002\012\005\000\002\010\004\000\002\010\005" +
    "\000\002\007\005\000\002\007\012\000\002\007\010\000" +
    "\002\007\006\000\002\007\011\000\002\007\007\000\002" +
    "\007\005\000\002\007\004\000\002\007\007\000\002\007" +
    "\004\000\002\007\004\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\004\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\004\000\002\007\005\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\005" +
    "\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\006\004\007\031\006\001\002\000\010\002" +
    "\001\004\007\031\226\001\002\000\004\002\225\001\002" +
    "\000\004\043\224\001\002\000\004\055\011\001\002\000" +
    "\010\002\uffff\004\uffff\031\uffff\001\002\000\006\011\013" +
    "\050\012\001\002\000\010\031\ufff9\051\ufff9\056\ufff9\001" +
    "\002\000\004\055\014\001\002\000\004\050\015\001\002" +
    "\000\010\031\ufff9\051\ufff9\056\ufff9\001\002\000\010\031" +
    "\017\051\022\056\021\001\002\000\010\031\ufff7\051\ufff7" +
    "\056\ufff7\001\002\000\010\031\ufff8\051\ufff8\056\ufff8\001" +
    "\002\000\006\044\024\045\025\001\002\000\004\043\023" +
    "\001\002\000\010\002\ufffa\004\ufffa\031\ufffa\001\002\000" +
    "\004\055\214\001\002\000\010\042\ufff1\046\ufff1\056\027" +
    "\001\002\000\006\042\ufff0\046\ufff0\001\002\000\004\044" +
    "\212\001\002\000\006\042\031\046\032\001\002\000\004" +
    "\056\027\001\002\000\004\044\033\001\002\000\004\055" +
    "\034\001\002\000\004\050\035\001\002\000\040\007\045" +
    "\012\054\017\036\020\050\024\041\025\046\027\051\031" +
    "\042\041\053\045\055\050\037\052\043\053\040\054\044" +
    "\056\047\001\002\000\036\007\045\012\054\017\036\020" +
    "\050\024\041\025\046\027\051\041\053\045\055\050\037" +
    "\052\043\053\040\054\044\056\047\001\002\000\036\007" +
    "\045\012\054\017\036\020\050\024\041\025\046\027\051" +
    "\041\053\045\055\050\037\052\043\053\040\054\044\056" +
    "\047\001\002\000\056\005\uffcb\006\uffcb\010\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\022\uffcb\030\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\042\uffcb\043\uffcb" +
    "\046\uffcb\047\uffcb\051\uffcb\057\uffcb\060\uffcb\001\002\000" +
    "\004\055\176\001\002\000\004\051\174\001\002\000\056" +
    "\005\uffca\006\uffca\010\uffca\014\uffca\015\uffca\016\uffca\022" +
    "\uffca\030\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\042\uffca\043\uffca\046\uffca\047\uffca\051" +
    "\uffca\057\uffca\060\uffca\001\002\000\056\005\uffc9\006\uffc9" +
    "\010\uffc9\014\uffc9\015\uffc9\016\uffc9\022\uffc9\030\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\042\uffc9\043\uffc9\046\uffc9\047\uffc9\051\uffc9\057\uffc9\060" +
    "\uffc9\001\002\000\036\007\045\012\054\017\036\020\050" +
    "\024\041\025\046\027\051\041\053\045\055\050\037\052" +
    "\043\053\040\054\044\056\047\001\002\000\036\007\045" +
    "\012\054\017\036\020\050\024\041\025\046\027\051\041" +
    "\053\045\055\050\037\052\043\053\040\054\044\056\047" +
    "\001\002\000\062\005\uffcc\006\uffcc\010\uffcc\014\uffcc\015" +
    "\uffcc\016\uffcc\022\uffcc\026\161\030\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\042\uffcc\043" +
    "\uffcc\045\160\046\uffcc\047\uffcc\051\uffcc\057\uffcc\060\uffcc" +
    "\001\002\000\036\007\045\012\054\017\036\020\050\024" +
    "\041\025\046\027\051\041\053\045\055\050\037\052\043" +
    "\053\040\054\044\056\047\001\002\000\036\007\045\012" +
    "\054\017\036\020\050\024\041\025\046\027\051\041\053" +
    "\045\055\050\037\052\043\053\040\054\044\056\047\001" +
    "\002\000\032\030\064\032\062\033\065\034\057\035\061" +
    "\036\063\037\071\040\066\047\070\051\141\057\060\060" +
    "\072\001\002\000\036\007\045\012\054\017\036\020\050" +
    "\024\041\025\046\027\051\041\053\045\055\050\037\052" +
    "\043\053\040\054\044\056\047\001\002\000\004\056\123" +
    "\001\002\000\036\007\045\012\054\017\036\020\050\024" +
    "\041\025\046\027\051\041\053\045\055\050\037\052\043" +
    "\053\040\054\044\056\047\001\002\000\032\030\064\032" +
    "\062\033\065\034\057\035\061\036\063\037\071\040\066" +
    "\046\067\047\070\057\060\060\072\001\002\000\036\007" +
    "\045\012\054\017\036\020\050\024\041\025\046\027\051" +
    "\041\053\045\055\050\037\052\043\053\040\054\044\056" +
    "\047\001\002\000\036\007\045\012\054\017\036\020\050" +
    "\024\041\025\046\027\051\041\053\045\055\050\037\052" +
    "\043\053\040\054\044\056\047\001\002\000\036\007\045" +
    "\012\054\017\036\020\050\024\041\025\046\027\051\041" +
    "\053\045\055\050\037\052\043\053\040\054\044\056\047" +
    "\001\002\000\036\007\045\012\054\017\036\020\050\024" +
    "\041\025\046\027\051\041\053\045\055\050\037\052\043" +
    "\053\040\054\044\056\047\001\002\000\036\007\045\012" +
    "\054\017\036\020\050\024\041\025\046\027\051\041\053" +
    "\045\055\050\037\052\043\053\040\054\044\056\047\001" +
    "\002\000\036\007\045\012\054\017\036\020\050\024\041" +
    "\025\046\027\051\041\053\045\055\050\037\052\043\053" +
    "\040\054\044\056\047\001\002\000\036\007\045\012\054" +
    "\017\036\020\050\024\041\025\046\027\051\041\053\045" +
    "\055\050\037\052\043\053\040\054\044\056\047\001\002" +
    "\000\004\056\107\001\002\000\056\005\uffcd\006\uffcd\010" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\022\uffcd\030\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\042" +
    "\uffcd\043\uffcd\046\uffcd\047\uffcd\051\uffcd\057\uffcd\060\uffcd" +
    "\001\002\000\004\055\075\001\002\000\036\007\045\012" +
    "\054\017\036\020\050\024\041\025\046\027\051\041\053" +
    "\045\055\050\037\052\043\053\040\054\044\056\047\001" +
    "\002\000\036\007\045\012\054\017\036\020\050\024\041" +
    "\025\046\027\051\041\053\045\055\050\037\052\043\053" +
    "\040\054\044\056\047\001\002\000\056\005\uffc7\006\uffc7" +
    "\010\uffc7\014\uffc7\015\uffc7\016\uffc7\022\uffc7\030\064\032" +
    "\062\033\065\034\057\035\061\036\063\037\071\040\066" +
    "\042\uffc7\043\uffc7\046\uffc7\047\070\051\uffc7\057\uffc7\060" +
    "\uffc7\001\002\000\050\005\uffd1\006\uffd1\010\uffd1\014\uffd1" +
    "\015\uffd1\016\uffd1\022\uffd1\032\062\033\065\034\057\035" +
    "\061\040\066\042\uffd1\043\uffd1\046\uffd1\047\070\051\uffd1" +
    "\057\uffd1\060\uffd1\001\002\000\004\040\076\001\002\000" +
    "\004\056\077\001\002\000\004\045\100\001\002\000\042" +
    "\007\045\012\054\017\036\020\050\024\041\025\046\027" +
    "\051\041\053\042\uffe6\045\055\046\uffe6\050\037\052\043" +
    "\053\040\054\044\056\047\001\002\000\004\046\106\001" +
    "\002\000\006\042\104\046\uffe7\001\002\000\034\030\064" +
    "\032\062\033\065\034\057\035\061\036\063\037\071\040" +
    "\066\042\uffe5\046\uffe5\047\070\057\060\060\072\001\002" +
    "\000\036\007\045\012\054\017\036\020\050\024\041\025" +
    "\046\027\051\041\053\045\055\050\037\052\043\053\040" +
    "\054\044\056\047\001\002\000\034\030\064\032\062\033" +
    "\065\034\057\035\061\036\063\037\071\040\066\042\uffe4" +
    "\046\uffe4\047\070\057\060\060\072\001\002\000\056\005" +
    "\uffe0\006\uffe0\010\uffe0\014\uffe0\015\uffe0\016\uffe0\022\uffe0" +
    "\030\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\042\uffe0\043\uffe0\046\uffe0\047\uffe0\051\uffe0" +
    "\057\uffe0\060\uffe0\001\002\000\004\045\110\001\002\000" +
    "\042\007\045\012\054\017\036\020\050\024\041\025\046" +
    "\027\051\041\053\042\uffe6\045\055\046\uffe6\050\037\052" +
    "\043\053\040\054\044\056\047\001\002\000\004\046\112" +
    "\001\002\000\056\005\uffdf\006\uffdf\010\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\022\uffdf\030\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\040\uffdf\042\uffdf\043\uffdf\046" +
    "\uffdf\047\uffdf\051\uffdf\057\uffdf\060\uffdf\001\002\000\056" +
    "\005\uffd3\006\uffd3\010\uffd3\014\uffd3\015\uffd3\016\uffd3\022" +
    "\uffd3\030\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\066\042\uffd3\043\uffd3\046\uffd3\047\070\051" +
    "\uffd3\057\uffd3\060\uffd3\001\002\000\050\005\uffd0\006\uffd0" +
    "\010\uffd0\014\uffd0\015\uffd0\016\uffd0\022\uffd0\032\062\033" +
    "\065\034\057\035\061\040\066\042\uffd0\043\uffd0\046\uffd0" +
    "\047\070\051\uffd0\057\uffd0\060\uffd0\001\002\000\050\005" +
    "\uffcf\006\uffcf\010\uffcf\014\uffcf\015\uffcf\016\uffcf\022\uffcf" +
    "\032\062\033\065\034\057\035\061\040\066\042\uffcf\043" +
    "\uffcf\046\uffcf\047\070\051\uffcf\057\uffcf\060\uffcf\001\002" +
    "\000\056\005\uffd6\006\uffd6\010\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\022\uffd6\030\uffd6\032\uffd6\033\065\034\uffd6\035\061" +
    "\036\uffd6\037\uffd6\040\066\042\uffd6\043\uffd6\046\uffd6\047" +
    "\070\051\uffd6\057\uffd6\060\uffd6\001\002\000\056\005\uffd4" +
    "\006\uffd4\010\uffd4\014\uffd4\015\uffd4\016\uffd4\022\uffd4\030" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\040\066\042\uffd4\043\uffd4\046\uffd4\047\070\051\uffd4\057" +
    "\uffd4\060\uffd4\001\002\000\056\005\uffc8\006\uffc8\010\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\022\uffc8\030\064\032\062\033" +
    "\065\034\057\035\061\036\063\037\071\040\066\042\uffc8" +
    "\043\uffc8\046\uffc8\047\070\051\uffc8\057\uffc8\060\uffc8\001" +
    "\002\000\056\005\uffd5\006\uffd5\010\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\022\uffd5\030\uffd5\032\uffd5\033\065\034\uffd5\035" +
    "\061\036\uffd5\037\uffd5\040\066\042\uffd5\043\uffd5\046\uffd5" +
    "\047\070\051\uffd5\057\uffd5\060\uffd5\001\002\000\056\005" +
    "\uffda\006\uffda\010\uffda\014\uffda\015\uffda\016\uffda\022\uffda" +
    "\030\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037" +
    "\uffda\040\uffda\042\uffda\043\uffda\046\uffda\047\uffda\051\uffda" +
    "\057\uffda\060\uffda\001\002\000\004\044\124\001\002\000" +
    "\004\055\125\001\002\000\010\010\127\026\130\042\126" +
    "\001\002\000\004\056\123\001\002\000\036\007\045\012" +
    "\054\017\036\020\050\024\041\025\046\027\051\041\053" +
    "\045\055\050\037\052\043\053\040\054\044\056\047\001" +
    "\002\000\036\007\045\012\054\017\036\020\050\024\041" +
    "\025\046\027\051\041\053\045\055\050\037\052\043\053" +
    "\040\054\044\056\047\001\002\000\034\010\132\030\064" +
    "\032\062\033\065\034\057\035\061\036\063\037\071\040" +
    "\066\042\133\047\070\057\060\060\072\001\002\000\036" +
    "\007\045\012\054\017\036\020\050\024\041\025\046\027" +
    "\051\041\053\045\055\050\037\052\043\053\040\054\044" +
    "\056\047\001\002\000\004\056\123\001\002\000\056\005" +
    "\uffe8\006\uffe8\010\uffe8\014\uffe8\015\uffe8\016\uffe8\022\uffe8" +
    "\030\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\042\uffe8\043\uffe8\046\uffe8\047\uffe8\051\uffe8" +
    "\057\uffe8\060\uffe8\001\002\000\056\005\uffea\006\uffea\010" +
    "\uffea\014\uffea\015\uffea\016\uffea\022\uffea\030\064\032\062" +
    "\033\065\034\057\035\061\036\063\037\071\040\066\042" +
    "\uffea\043\uffea\046\uffea\047\070\051\uffea\057\060\060\072" +
    "\001\002\000\056\005\uffeb\006\uffeb\010\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\022\uffeb\030\064\032\062\033\065\034\057" +
    "\035\061\036\063\037\071\040\066\042\uffeb\043\uffeb\046" +
    "\uffeb\047\070\051\uffeb\057\060\060\072\001\002\000\056" +
    "\005\uffe9\006\uffe9\010\uffe9\014\uffe9\015\uffe9\016\uffe9\022" +
    "\uffe9\030\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\042\uffe9\043\uffe9\046\uffe9\047\uffe9\051" +
    "\uffe9\057\uffe9\060\uffe9\001\002\000\056\005\uffd2\006\uffd2" +
    "\010\uffd2\014\uffd2\015\uffd2\016\uffd2\022\uffd2\030\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\066" +
    "\042\uffd2\043\uffd2\046\uffd2\047\070\051\uffd2\057\uffd2\060" +
    "\uffd2\001\002\000\004\043\142\001\002\000\010\031\ufff6" +
    "\051\ufff6\056\ufff6\001\002\000\056\005\uffce\006\uffce\010" +
    "\uffce\014\uffce\015\uffce\016\uffce\022\uffce\030\064\032\062" +
    "\033\065\034\057\035\061\036\063\037\071\040\066\042" +
    "\uffce\043\uffce\046\uffce\047\070\051\uffce\057\uffce\060\uffce" +
    "\001\002\000\032\022\145\030\064\032\062\033\065\034" +
    "\057\035\061\036\063\037\071\040\066\047\070\057\060" +
    "\060\072\001\002\000\004\056\147\001\002\000\006\021" +
    "\uffed\056\uffed\001\002\000\004\044\153\001\002\000\006" +
    "\021\152\056\147\001\002\000\006\021\uffec\056\uffec\001" +
    "\002\000\056\005\uffd9\006\uffd9\010\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\022\uffd9\030\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\042\uffd9\043\uffd9\046\uffd9" +
    "\047\uffd9\051\uffd9\057\uffd9\060\uffd9\001\002\000\004\055" +
    "\154\001\002\000\004\023\155\001\002\000\036\007\045" +
    "\012\054\017\036\020\050\024\041\025\046\027\051\041" +
    "\053\045\055\050\037\052\043\053\040\054\044\056\047" +
    "\001\002\000\032\030\064\032\062\033\065\034\057\035" +
    "\061\036\063\037\071\040\066\043\157\047\070\057\060" +
    "\060\072\001\002\000\006\021\uffee\056\uffee\001\002\000" +
    "\042\007\045\012\054\017\036\020\050\024\041\025\046" +
    "\027\051\041\053\042\uffe6\045\055\046\uffe6\050\037\052" +
    "\043\053\040\054\044\056\047\001\002\000\036\007\045" +
    "\012\054\017\036\020\050\024\041\025\046\027\051\041" +
    "\053\045\055\050\037\052\043\053\040\054\044\056\047" +
    "\001\002\000\056\005\uffe1\006\uffe1\010\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\022\uffe1\030\064\032\062\033\065\034\057" +
    "\035\061\036\063\037\071\040\066\042\uffe1\043\uffe1\046" +
    "\uffe1\047\070\051\uffe1\057\060\060\072\001\002\000\004" +
    "\046\164\001\002\000\056\005\uffde\006\uffde\010\uffde\014" +
    "\uffde\015\uffde\016\uffde\022\uffde\030\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\042\uffde\043" +
    "\uffde\046\uffde\047\uffde\051\uffde\057\uffde\060\uffde\001\002" +
    "\000\056\005\uffd7\006\uffd7\010\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\022\uffd7\030\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\040\066\042\uffd7\043\uffd7\046\uffd7\047" +
    "\070\051\uffd7\057\uffd7\060\uffd7\001\002\000\032\016\167" +
    "\030\064\032\062\033\065\034\057\035\061\036\063\037" +
    "\071\040\066\047\070\057\060\060\072\001\002\000\036" +
    "\007\045\012\054\017\036\020\050\024\041\025\046\027" +
    "\051\041\053\045\055\050\037\052\043\053\040\054\044" +
    "\056\047\001\002\000\032\005\171\030\064\032\062\033" +
    "\065\034\057\035\061\036\063\037\071\040\066\047\070" +
    "\057\060\060\072\001\002\000\036\007\045\012\054\017" +
    "\036\020\050\024\041\025\046\027\051\041\053\045\055" +
    "\050\037\052\043\053\040\054\044\056\047\001\002\000" +
    "\032\006\173\030\064\032\062\033\065\034\057\035\061" +
    "\036\063\037\071\040\066\047\070\057\060\060\072\001" +
    "\002\000\056\005\uffdd\006\uffdd\010\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\022\uffdd\030\uffdd\032\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\042\uffdd\043\uffdd\046\uffdd" +
    "\047\uffdd\051\uffdd\057\uffdd\060\uffdd\001\002\000\004\043" +
    "\175\001\002\000\010\031\ufff3\051\ufff3\056\ufff3\001\002" +
    "\000\056\005\uffd8\006\uffd8\010\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\022\uffd8\030\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8\046\uffd8\047" +
    "\uffd8\051\uffd8\057\uffd8\060\uffd8\001\002\000\040\007\045" +
    "\012\054\017\036\020\050\024\041\025\046\027\051\041" +
    "\053\045\055\050\037\051\203\052\043\053\040\054\044" +
    "\056\047\001\002\000\032\030\064\032\062\033\065\034" +
    "\057\035\061\036\063\037\071\040\066\043\201\047\070" +
    "\057\060\060\072\001\002\000\040\007\uffe3\012\uffe3\017" +
    "\uffe3\020\uffe3\024\uffe3\025\uffe3\027\uffe3\041\uffe3\045\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\056\uffe3\001" +
    "\002\000\032\030\064\032\062\033\065\034\057\035\061" +
    "\036\063\037\071\040\066\043\204\047\070\057\060\060" +
    "\072\001\002\000\056\005\uffdb\006\uffdb\010\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\022\uffdb\030\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\042\uffdb\043\uffdb" +
    "\046\uffdb\047\uffdb\051\uffdb\057\uffdb\060\uffdb\001\002\000" +
    "\040\007\uffe2\012\uffe2\017\uffe2\020\uffe2\024\uffe2\025\uffe2" +
    "\027\uffe2\041\uffe2\045\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\054\uffe2\056\uffe2\001\002\000\032\014\206\030\064" +
    "\032\062\033\065\034\057\035\061\036\063\037\071\040" +
    "\066\047\070\057\060\060\072\001\002\000\036\007\045" +
    "\012\054\017\036\020\050\024\041\025\046\027\051\041" +
    "\053\045\055\050\037\052\043\053\040\054\044\056\047" +
    "\001\002\000\032\015\210\030\064\032\062\033\065\034" +
    "\057\035\061\036\063\037\071\040\066\047\070\057\060" +
    "\060\072\001\002\000\056\005\uffdc\006\uffdc\010\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\022\uffdc\030\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\042\uffdc\043" +
    "\uffdc\046\uffdc\047\uffdc\051\uffdc\057\uffdc\060\uffdc\001\002" +
    "\000\006\042\uffef\046\uffef\001\002\000\004\055\213\001" +
    "\002\000\006\042\ufff2\046\ufff2\001\002\000\006\026\216" +
    "\043\215\001\002\000\010\031\ufff4\051\ufff4\056\ufff4\001" +
    "\002\000\036\007\045\012\054\017\036\020\050\024\041" +
    "\025\046\027\051\041\053\045\055\050\037\052\043\053" +
    "\040\054\044\056\047\001\002\000\032\030\064\032\062" +
    "\033\065\034\057\035\061\036\063\037\071\040\066\043" +
    "\220\047\070\057\060\060\072\001\002\000\010\031\ufff5" +
    "\051\ufff5\056\ufff5\001\002\000\010\031\017\051\222\056" +
    "\021\001\002\000\004\043\223\001\002\000\010\002\ufffb" +
    "\004\ufffb\031\ufffb\001\002\000\010\002\ufffc\004\ufffc\031" +
    "\ufffc\001\002\000\004\002\000\001\002\000\010\002\ufffd" +
    "\004\ufffd\031\ufffd\001\002\000\010\002\ufffe\004\ufffe\031" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\010\002\004\003\003\004\007\001\001\000" +
    "\004\004\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\015\001\001\000\004\006\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\025\014\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\051" +
    "\001\001\000\004\007\204\001\001\000\006\007\177\010" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\165\001\001\000\004\007\164\001\001\000\002\001\001" +
    "\000\004\007\143\001\001\000\004\007\142\001\001\000" +
    "\002\001\001\000\004\007\137\001\001\000\004\017\121" +
    "\001\001\000\004\007\055\001\001\000\002\001\001\000" +
    "\004\007\120\001\001\000\004\007\117\001\001\000\004" +
    "\007\116\001\001\000\004\007\115\001\001\000\004\007" +
    "\114\001\001\000\004\007\113\001\001\000\004\007\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\073\001\001\000\004\007\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\102\011\100" +
    "\012\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\102\011" +
    "\110\012\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\136\001\001\000\004" +
    "\007\135\001\001\000\004\007\130\001\001\000\002\001" +
    "\001\000\004\007\134\001\001\000\004\017\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\147\016\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\102\011\162\012\101\001\001\000\004\007\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\167\001\001" +
    "\000\002\001\001\000\004\007\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CoolCup$actions {

 

    int curr_lineno() {
	return ((CoolLexer)parser.getScanner()).get_curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolLexer)parser.getScanner()).curr_filename();
    }

  private final CoolCup parser;

  /** Constructor */
  CUP$CoolCup$actions(CoolCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CoolCup$do_action(
    int                        CUP$CoolCup$act_num,
    java_cup.runtime.lr_parser CUP$CoolCup$parser,
    java.util.Stack            CUP$CoolCup$stack,
    int                        CUP$CoolCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolCup$result;

      /* select the action based on the action number */
      switch (CUP$CoolCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr OR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new or(curr_lineno(), e1, e2); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr AND expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new and(curr_lineno(), e1, e2); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= BOOL_CONST 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new bool_const(curr_lineno(), b); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= STR_CONST 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		AbstractSymbol s = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new string_const(curr_lineno(), s); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= INT_CONST 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		AbstractSymbol i = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new int_const(curr_lineno(), i); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= OBJECTID 
            {
              Expression RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		AbstractSymbol oi = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new object(curr_lineno(), oi); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = e; 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new comp(curr_lineno(), e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr EQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new eq(curr_lineno(), e1, e2); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr LE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new leq(curr_lineno(), e1, e2); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr LT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new lt(curr_lineno(), e1, e2); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= NEG expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new neg(curr_lineno(), e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr DIV expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new divide(curr_lineno(), e1, e2); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr MULT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new mul(curr_lineno(), e1, e2); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new sub(curr_lineno(), e1, e2); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new plus(curr_lineno(), e1, e2); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= ISVOID expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new isvoid(curr_lineno(), e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= NEW TYPEID 
            {
              Expression RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		AbstractSymbol ti = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new new_(curr_lineno(), ti); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= CASE expr OF cases ESAC 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Cases cl = (Cases)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new typcase(curr_lineno(), e, cl); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= LET letstatement 
            {
              Expression RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		let ls = (let)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = ls; 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= LBRACE expressions RBRACE 
            {
              Expression RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new block(curr_lineno(), el); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= WHILE expr LOOP expr POOL 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new loop(curr_lineno(), e1, e2); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= IF expr THEN expr ELSE expr FI 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new cond(curr_lineno(), e1, e2, e3); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= OBJECTID LPAREN e_list RPAREN 
            {
              Expression RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		AbstractSymbol oi = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new dispatch(curr_lineno(), new object(curr_lineno(), AbstractTable.idtable.addString("self")), oi, el); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr DOT OBJECTID LPAREN e_list RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).value;
		int oileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		AbstractSymbol oi = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new dispatch(curr_lineno(), e, oi, el); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr AT TYPEID DOT OBJECTID LPAREN e_list RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).right;
		AbstractSymbol ti = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).value;
		int oileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		AbstractSymbol oi = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new static_dispatch(curr_lineno(), e, ti, oi, el); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= OBJECTID ASSIGN expr 
            {
              Expression RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		AbstractSymbol oi = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new assign(curr_lineno(), oi, e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expressions ::= expressions expr SEMI 
            {
              Expressions RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = el.appendElement(e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expressions",6, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expressions ::= expr SEMI 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = (new Expressions(curr_lineno())).appendElement(e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expressions",6, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // e_args ::= e_args COMMA expr 
            {
              Expressions RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expressions ea = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = ea.appendElement(e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("e_args",8, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // e_args ::= expr 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = (new Expressions(curr_lineno())).appendElement(e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("e_args",8, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // e_args ::= 
            {
              Expressions RESULT =null;
		 RESULT = new Expressions(curr_lineno()); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("e_args",8, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // e_list ::= e_args 
            {
              Expressions RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expressions ea = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = ea; 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("e_list",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // letstatement ::= OBJECTID COLON TYPEID ASSIGN expr COMMA letstatement 
            {
              let RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).right;
		AbstractSymbol oi = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol ti = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		let ls = (let)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new let(curr_lineno(), oi, ti, e, ls); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("letstatement",13, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // letstatement ::= OBJECTID COLON TYPEID COMMA letstatement 
            {
              let RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol oi = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		AbstractSymbol ti = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		let ls = (let)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new let(curr_lineno(), oi, ti, new no_expr(curr_lineno()), ls); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("letstatement",13, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // letstatement ::= OBJECTID COLON TYPEID ASSIGN expr IN expr 
            {
              let RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).right;
		AbstractSymbol oi = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol ti = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new let(curr_lineno(), oi, ti, e1, e2); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("letstatement",13, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // letstatement ::= OBJECTID COLON TYPEID IN expr 
            {
              let RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol oi = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		AbstractSymbol ti = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new let(curr_lineno(), oi, ti, new no_expr(curr_lineno()), e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("letstatement",13, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cases ::= cases case 
            {
              Cases RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Cases cl = (Cases)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		branch c = (branch)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("cases",11, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cases ::= case 
            {
              Cases RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		branch c = (branch)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = (new Cases(curr_lineno())).appendElement(c); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("cases",11, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // case ::= OBJECTID COLON TYPEID DARROW expr SEMI 
            {
              branch RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).right;
		AbstractSymbol oi = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		AbstractSymbol ti = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new branch(curr_lineno(), oi, ti, e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("case",12, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formals ::= formals COMMA formal 
            {
              Formals RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		FormalAbstract f = (FormalAbstract)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("formals",10, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formals ::= formal 
            {
              Formals RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		FormalAbstract f = (FormalAbstract)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = (new Formals(curr_lineno())).appendElement(f); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("formals",10, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formals ::= 
            {
              Formals RESULT =null;
		 RESULT = new Formals(curr_lineno()); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("formals",10, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formal ::= OBJECTID COLON TYPEID 
            {
              FormalAbstract RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		AbstractSymbol oi = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		AbstractSymbol ti = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT =  new formal(curr_lineno(), oi, ti); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("formal",9, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // feature ::= OBJECTID LPAREN formals RPAREN COLON TYPEID LBRACE ERROR RBRACE SEMI 
            {
              Feature RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-9)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-9)).right;
		AbstractSymbol oi = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).right;
		Formals f = (Formals)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol ti = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		 RESULT = null; 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("feature",4, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-9)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // feature ::= OBJECTID COLON TYPEID SEMI 
            {
              Feature RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		AbstractSymbol oi = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		AbstractSymbol ti = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new attr(curr_lineno(), oi, ti, new no_expr(curr_lineno())); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("feature",4, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // feature ::= OBJECTID COLON TYPEID ASSIGN expr SEMI 
            {
              Feature RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).right;
		AbstractSymbol oi = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		AbstractSymbol ti = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new attr(curr_lineno(), oi, ti, e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("feature",4, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // feature ::= OBJECTID LPAREN formals RPAREN COLON TYPEID LBRACE expr RBRACE SEMI 
            {
              Feature RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-9)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-9)).right;
		AbstractSymbol oi = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).right;
		Formals f = (Formals)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol ti = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		 RESULT = new method(curr_lineno(), oi, f, ti, e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("feature",4, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-9)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dummy_feature_list ::= dummy_feature_list ERROR 
            {
              Features RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = fl; 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("dummy_feature_list",3, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dummy_feature_list ::= dummy_feature_list feature 
            {
              Features RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("dummy_feature_list",3, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dummy_feature_list ::= 
            {
              Features RESULT =null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("dummy_feature_list",3, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE dummy_feature_list RBRACE SEMI 
            {
              ClassAbstract RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		 RESULT = new class_(curr_lineno(), n, p, f, curr_filename()); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("class",2, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class ::= CLASS TYPEID LBRACE dummy_feature_list RBRACE SEMI 
            {
              ClassAbstract RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		 RESULT = new class_(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("class",2, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class_list ::= ERROR SEMI 
            {
              Classes RESULT =null;
		 RESULT = (new Classes(curr_lineno())); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_list ::= class_list ERROR 
            {
              Classes RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = cl; 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_list class 
            {
              Classes RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		ClassAbstract c = (ClassAbstract)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class 
            {
              Classes RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		ClassAbstract c = (ClassAbstract)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		ProgramAbstract start_val = (ProgramAbstract)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		RESULT = start_val;
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CoolCup$parser.done_parsing();
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              ProgramAbstract RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new program(curr_lineno(), cl); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

