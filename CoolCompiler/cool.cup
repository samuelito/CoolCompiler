/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */
 
import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */


action code {: 

    int curr_lineno() {
	return ((CoolLexer)parser.getScanner()).get_curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WON'T WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal ProgramAbstract program;
nonterminal Classes class_list;
nonterminal ClassAbstract class;
nonterminal Features dummy_feature_list;

/* ADDED */
nonterminal Feature feature;
nonterminal Expression expr;
nonterminal Expressions expressions;
nonterminal Expressions e_list;
nonterminal Expressions e_args;
nonterminal FormalAbstract formal;
nonterminal Formals formals;
nonterminal Cases cases;
nonterminal branch case;
nonterminal let letstatement;

/* Precedence declarations go here. */
precedence left LPAREN;
precedence right ASSIGN;
precedence left NOT;
precedence nonassoc LE, LT, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;

program	
	::= class_list:cl
	    {: RESULT = new program(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_(curr_lineno(), n, p, f, curr_filename()); :}
	;

/* Feature list may be empty. */
dummy_feature_list
	::= /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
	    
/* add more stuff here. */ 
	| dummy_feature_list:fl feature:f
		{: RESULT = fl.appendElement(f); :}
	;
	
/* feature rules:
	ID ( formals,* ) : TYPE { expr } 
	ID : TYPE [<- expr]
*/

feature
	::= OBJECTID:oi LPAREN formals:f RPAREN COLON TYPEID:ti LBRACE expr:e RBRACE SEMI
		{: RESULT = new method(curr_lineno(), oi, f, ti, e); :}
	
	| OBJECTID:oi COLON TYPEID:ti ASSIGN expr:e SEMI
		{: RESULT = new attr(curr_lineno(), oi, ti, e); :}

	| OBJECTID:oi COLON TYPEID:ti SEMI
		{: RESULT = new attr(curr_lineno(), oi, ti, new no_expr(curr_lineno())); :}
	;
	
/*  FORMAL RULE
	ID : TYPE   */

formal 
	::= OBJECTID:oi COLON TYPEID:ti 
		{: RESULT =  new formal(curr_lineno(), oi, ti); :}
	;

/*   Formals in -> feature : 
		ID( formals,*) : TYPE { expr }   */

formals
	::= /* empty */
	    {: RESULT = new Formals(curr_lineno()); :}
	    
	| formal:f
		{: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
	
	| formals:fl COMMA formal:f
		{: RESULT = fl.appendElement(f); :}
	;

/*	RULE FOR ONE CASE - returns new branch()
		[[ ID : TYPE => expr ; ]]+     */

case	
	::= OBJECTID:oi COLON TYPEID:ti DARROW expr:e SEMI
		{: RESULT = new branch(curr_lineno(), oi, ti, e); :}
	;
	
/*LIST OF CASES*/

cases
	::= case:c
		{: RESULT = (new Cases(curr_lineno())).appendElement(c); :}
	| cases:cl case:c
		{: RESULT = cl.appendElement(c); :}
	;

/* LET Statement: 
		LET [[ ID : TYPE [ <- expr] ]],+ IN expr      */

letstatement
	::= OBJECTID:oi COLON TYPEID:ti IN expr:e
		{: RESULT = new let(curr_lineno(), oi, ti, new no_expr(curr_lineno()), e); :}
		
	| OBJECTID:oi COLON TYPEID:ti ASSIGN expr:e1 IN expr:e2
		{: RESULT = new let(curr_lineno(), oi, ti, e1, e2); :}
		
	| OBJECTID:oi COLON TYPEID:ti COMMA letstatement:ls
		{: RESULT = new let(curr_lineno(), oi, ti, new no_expr(curr_lineno()), ls); :}

	| OBJECTID:oi COLON TYPEID:ti ASSIGN expr:e COMMA letstatement:ls
		{: RESULT = new let(curr_lineno(), oi, ti, e, ls); :}
	;
	
/* Rule : ( expr, ) */
e_list
	::= e_args:ea
		{: RESULT = ea; :}
	;
		
e_args
	::=
		{: RESULT = new Expressions(curr_lineno()); :}	
	| expr:e
		{: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
	| e_args:ea COMMA expr:e
		{: RESULT = ea.appendElement(e); :}
	;

/* 	Rule: { expr;+ }  -> new block()   */ 

expressions
		::= expr:e SEMI
			{: RESULT = (new Expressions(curr_lineno())).appendElement(e); :} 
		| expressions:el expr:e
			{: RESULT = el.appendElement(e); :}
		;
		
/* Rules for Expression */
	
expr 
	::= OBJECTID:oi ASSIGN expr:e
		{: RESULT = new assign(curr_lineno(), oi, e); :}

	| expr:e AT TYPEID:ti DOT OBJECTID:oi LPAREN e_list:el RPAREN
		{: RESULT = new static_dispatch(curr_lineno(), e, ti, oi, el); :}

	| expr:e DOT OBJECTID:oi LPAREN e_list:el RPAREN
		{: RESULT = new dispatch(curr_lineno(), e, oi, el); :}

	| OBJECTID:oi LPAREN e_list:el RPAREN
		{: RESULT = new dispatch(curr_lineno(), new object(curr_lineno(), AbstractTable.idtable.addString("self")), oi, el); :}
	
	| IF expr:e1 THEN expr:e2 ELSE expr:e3 FI
		{: RESULT = new cond(curr_lineno(), e1, e2, e3); :}
	| WHILE expr:e1 LOOP expr:e2 POOL
		{: RESULT = new loop(curr_lineno(), e1, e2); :}
	| LBRACE expressions:el RBRACE
		{: RESULT = new block(curr_lineno(), el); :}	
	| LET letstatement:ls											
		{: RESULT = ls; :}			
	| CASE expr:e OF cases:cl ESAC
		{: RESULT = new typcase(curr_lineno(), e, cl); :}
	| NEW TYPEID:ti
		{: RESULT = new new_(curr_lineno(), ti); :}
	| ISVOID expr:e
		{: RESULT = new isvoid(curr_lineno(), e); :}
	| expr:e1 PLUS expr:e2
		{: RESULT = new plus(curr_lineno(), e1, e2); :}
	| expr:e1 MINUS expr:e2
		{: RESULT = new sub(curr_lineno(), e1, e2); :}
	| expr:e1 MULT expr:e2
		{: RESULT = new mul(curr_lineno(), e1, e2); :}
	| expr:e1 DIV expr:e2
		{: RESULT = new divide(curr_lineno(), e1, e2); :}
	| NEG expr:e
		{: RESULT = new neg(curr_lineno(), e); :}
	| expr:e1 LT expr:e2
		{: RESULT = new lt(curr_lineno(), e1, e2); :}
	| expr:e1 LE expr:e2
		{: RESULT = new leq(curr_lineno(), e1, e2); :}
	| expr:e1 EQ expr:e2
		{: RESULT = new eq(curr_lineno(), e1, e2); :}
	| NOT expr:e
		{: RESULT = new comp(curr_lineno(), e); :}
	| LPAREN expr:e RPAREN
		{: RESULT = e; :}
	| OBJECTID:oi
		{: RESULT = new object(curr_lineno(), oi); :}
	| INT_CONST:i
		{: RESULT = new int_const(curr_lineno(), i); :}
	| STR_CONST:s
		{: RESULT = new string_const(curr_lineno(), s); :}
	| BOOL_CONST:b
		{: RESULT = new bool_const(curr_lineno(), b); :}
	;
	
	